
finalBlinkLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000328  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000434  08000434  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000434  08000434  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000434  08000434  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000434  08000434  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000434  08000434  00010434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000438  08000438  00010438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800043c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000440  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000440  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000eb4  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004cb  00000000  00000000  00020ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  000213b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  00021580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001521a  00000000  00000000  00021708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e0b  00000000  00000000  00036922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007afd1  00000000  00000000  0003872d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b36fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000574  00000000  00000000  000b3750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	0800041c 	.word	0x0800041c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	0800041c 	.word	0x0800041c

0800014c <main>:
static void MX_GPIO_Init(void);
void UART1_Init(void);
void TIM2_delay(uint32_t delay_ms);

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	uint8_t data;
	SystemClock_Config();
 8000152:	f000 f82d 	bl	80001b0 <SystemClock_Config>
	MX_GPIO_Init();
 8000156:	f000 f847 	bl	80001e8 <MX_GPIO_Init>
	UART1_Init();
 800015a:	f000 f867 	bl	800022c <UART1_Init>
//		//GPIOC->ODR &= ~((1<<13)|(1<<14));
//		GPIOA->ODR &= ~(1<<11);
//		//delay 1s
//		TIM2_delay(1000);

		GPIOA->ODR |= (1<<11);
 800015e:	4b12      	ldr	r3, [pc, #72]	; (80001a8 <main+0x5c>)
 8000160:	68db      	ldr	r3, [r3, #12]
 8000162:	4a11      	ldr	r2, [pc, #68]	; (80001a8 <main+0x5c>)
 8000164:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000168:	60d3      	str	r3, [r2, #12]
	  	// Wait for data to be received
	 	 while (!(USART1->SR & USART_SR_RXNE));
 800016a:	bf00      	nop
 800016c:	4b0f      	ldr	r3, [pc, #60]	; (80001ac <main+0x60>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	2b00      	cmp	r3, #0
 8000176:	d0f9      	beq.n	800016c <main+0x20>

	 	 // Read received data
	 	 data = USART1->DR;
 8000178:	4b0c      	ldr	r3, [pc, #48]	; (80001ac <main+0x60>)
 800017a:	685b      	ldr	r3, [r3, #4]
 800017c:	71fb      	strb	r3, [r7, #7]

	 	 //for(int i=0;i<1000000;i++);
		 // Send a response
		 USART1->DR = data;
 800017e:	4a0b      	ldr	r2, [pc, #44]	; (80001ac <main+0x60>)
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	6053      	str	r3, [r2, #4]
	 	 while (!(USART1->SR & USART_SR_TXE));
 8000184:	bf00      	nop
 8000186:	4b09      	ldr	r3, [pc, #36]	; (80001ac <main+0x60>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800018e:	2b00      	cmp	r3, #0
 8000190:	d0f9      	beq.n	8000186 <main+0x3a>
	 	 GPIOA->ODR &= ~(1<<11);
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <main+0x5c>)
 8000194:	68db      	ldr	r3, [r3, #12]
 8000196:	4a04      	ldr	r2, [pc, #16]	; (80001a8 <main+0x5c>)
 8000198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800019c:	60d3      	str	r3, [r2, #12]
	 	 TIM2_delay(1000);
 800019e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a2:	f000 f877 	bl	8000294 <TIM2_delay>
		GPIOA->ODR |= (1<<11);
 80001a6:	e7da      	b.n	800015e <main+0x12>
 80001a8:	40010800 	.word	0x40010800
 80001ac:	40013800 	.word	0x40013800

080001b0 <SystemClock_Config>:
	}
}

void SystemClock_Config(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
	//HSE on
	RCC->CR |= RCC_CR_HSEON;
 80001b4:	4b0b      	ldr	r3, [pc, #44]	; (80001e4 <SystemClock_Config+0x34>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a0a      	ldr	r2, [pc, #40]	; (80001e4 <SystemClock_Config+0x34>)
 80001ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001be:	6013      	str	r3, [r2, #0]
	//wait HSE complete
	while (!(RCC->CR & RCC_CR_HSERDY));
 80001c0:	bf00      	nop
 80001c2:	4b08      	ldr	r3, [pc, #32]	; (80001e4 <SystemClock_Config+0x34>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d0f9      	beq.n	80001c2 <SystemClock_Config+0x12>
	// configure system clock - HSE
	RCC->CFGR |= RCC_CFGR_SW_HSE;
 80001ce:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <SystemClock_Config+0x34>)
 80001d0:	685b      	ldr	r3, [r3, #4]
 80001d2:	4a04      	ldr	r2, [pc, #16]	; (80001e4 <SystemClock_Config+0x34>)
 80001d4:	f043 0301 	orr.w	r3, r3, #1
 80001d8:	6053      	str	r3, [r2, #4]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	40021000 	.word	0x40021000

080001e8 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	// Clock for GPIO A, GPIO C
	RCC->APB2ENR |=RCC_APB2ENR_IOPAEN;
 80001ec:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <MX_GPIO_Init+0x3c>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	4a0c      	ldr	r2, [pc, #48]	; (8000224 <MX_GPIO_Init+0x3c>)
 80001f2:	f043 0304 	orr.w	r3, r3, #4
 80001f6:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |=(1<<4);
 80001f8:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <MX_GPIO_Init+0x3c>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	4a09      	ldr	r2, [pc, #36]	; (8000224 <MX_GPIO_Init+0x3c>)
 80001fe:	f043 0310 	orr.w	r3, r3, #16
 8000202:	6193      	str	r3, [r2, #24]
	//configure mode push-pull for PC13
//	GPIOC->CRH |= GPIO_CRH_MODE13_Msk;
//	GPIOC->CRH |=GPIO_CRH_MODE14_Msk;
//	GPIOC->CRH |= GPIO_CRH_MODE13_0;
	GPIOA->CRH |= GPIO_CRH_MODE11_1;
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <MX_GPIO_Init+0x40>)
 8000206:	685b      	ldr	r3, [r3, #4]
 8000208:	4a07      	ldr	r2, [pc, #28]	; (8000228 <MX_GPIO_Init+0x40>)
 800020a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800020e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~((1<<14)|(1<<15));
 8000210:	4b05      	ldr	r3, [pc, #20]	; (8000228 <MX_GPIO_Init+0x40>)
 8000212:	685b      	ldr	r3, [r3, #4]
 8000214:	4a04      	ldr	r2, [pc, #16]	; (8000228 <MX_GPIO_Init+0x40>)
 8000216:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800021a:	6053      	str	r3, [r2, #4]
	//GPIOA->CRH &= ~(1<<11);
}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr
 8000224:	40021000 	.word	0x40021000
 8000228:	40010800 	.word	0x40010800

0800022c <UART1_Init>:
void UART1_Init(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
	// Enable USART1 and GPIOA clock
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN | RCC_APB2ENR_IOPAEN;
 8000230:	4b15      	ldr	r3, [pc, #84]	; (8000288 <UART1_Init+0x5c>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	4a14      	ldr	r2, [pc, #80]	; (8000288 <UART1_Init+0x5c>)
 8000236:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800023a:	f043 0304 	orr.w	r3, r3, #4
 800023e:	6193      	str	r3, [r2, #24]

	// Configure USART1 TX pin (PA9) as alternate function push-pull
	GPIOA->CRH &= ~(GPIO_CRH_CNF9 | GPIO_CRH_MODE9); // Clear CNF and MODE bits for pin 9
 8000240:	4b12      	ldr	r3, [pc, #72]	; (800028c <UART1_Init+0x60>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	4a11      	ldr	r2, [pc, #68]	; (800028c <UART1_Init+0x60>)
 8000246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800024a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9; // Set CNF bits to alternate function push-pull, and MODE bits to 50 MHz
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <UART1_Init+0x60>)
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	4a0e      	ldr	r2, [pc, #56]	; (800028c <UART1_Init+0x60>)
 8000252:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000256:	6053      	str	r3, [r2, #4]

	// Configure USART1 RX pin (PA10) as input floating
	GPIOA->CRH &= ~(GPIO_CRH_CNF10 | GPIO_CRH_MODE10); // Clear CNF and MODE bits for pin 10
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <UART1_Init+0x60>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	4a0b      	ldr	r2, [pc, #44]	; (800028c <UART1_Init+0x60>)
 800025e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000262:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF10_0; // Set CNF bits to input floating
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <UART1_Init+0x60>)
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	4a08      	ldr	r2, [pc, #32]	; (800028c <UART1_Init+0x60>)
 800026a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800026e:	6053      	str	r3, [r2, #4]

	// Configure USART1 with desired settings
	USART1->BRR = SystemCoreClock_def / UART_BAUDRATE; // Set baud rate
 8000270:	4b07      	ldr	r3, [pc, #28]	; (8000290 <UART1_Init+0x64>)
 8000272:	2245      	movs	r2, #69	; 0x45
 8000274:	609a      	str	r2, [r3, #8]
	USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE; // Enable transmitter, receiver, and USART1
 8000276:	4b06      	ldr	r3, [pc, #24]	; (8000290 <UART1_Init+0x64>)
 8000278:	f242 020c 	movw	r2, #8204	; 0x200c
 800027c:	60da      	str	r2, [r3, #12]
}
 800027e:	bf00      	nop
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	40021000 	.word	0x40021000
 800028c:	40010800 	.word	0x40010800
 8000290:	40013800 	.word	0x40013800

08000294 <TIM2_delay>:

void TIM2_delay(uint32_t delay_ms)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
    // Enable clock for TIM2
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800029c:	4b19      	ldr	r3, [pc, #100]	; (8000304 <TIM2_delay+0x70>)
 800029e:	69db      	ldr	r3, [r3, #28]
 80002a0:	4a18      	ldr	r2, [pc, #96]	; (8000304 <TIM2_delay+0x70>)
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	61d3      	str	r3, [r2, #28]

    // Set prescaler and auto-reload values
    TIM2->PSC = 7999; // Prescaler value for 1ms tick with 8MHz sysclk
 80002a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ac:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002b0:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = delay_ms; // Auto-reload value for desired delay in ms
 80002b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Enable the TIM2 and start the timer
    TIM2->CR1 |= TIM_CR1_CEN;
 80002ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002c4:	f043 0301 	orr.w	r3, r3, #1
 80002c8:	6013      	str	r3, [r2, #0]

    // Wait for the timer to reach the desired value
    while(!(TIM2->SR & TIM_SR_UIF));
 80002ca:	bf00      	nop
 80002cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d0:	691b      	ldr	r3, [r3, #16]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d0f8      	beq.n	80002cc <TIM2_delay+0x38>

    // Clear the UIF bit and disable the TIM2
    TIM2->SR &= ~TIM_SR_UIF;
 80002da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002de:	691b      	ldr	r3, [r3, #16]
 80002e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002e4:	f023 0301 	bic.w	r3, r3, #1
 80002e8:	6113      	str	r3, [r2, #16]
    TIM2->CR1 &= ~TIM_CR1_CEN;
 80002ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002f4:	f023 0301 	bic.w	r3, r3, #1
 80002f8:	6013      	str	r3, [r2, #0]
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	40021000 	.word	0x40021000

08000308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800030c:	e7fe      	b.n	800030c <NMI_Handler+0x4>

0800030e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000312:	e7fe      	b.n	8000312 <HardFault_Handler+0x4>

08000314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000318:	e7fe      	b.n	8000318 <MemManage_Handler+0x4>

0800031a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800031a:	b480      	push	{r7}
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800031e:	e7fe      	b.n	800031e <BusFault_Handler+0x4>

08000320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000324:	e7fe      	b.n	8000324 <UsageFault_Handler+0x4>

08000326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000326:	b480      	push	{r7}
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800032a:	bf00      	nop
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr

08000332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000336:	bf00      	nop
 8000338:	46bd      	mov	sp, r7
 800033a:	bc80      	pop	{r7}
 800033c:	4770      	bx	lr

0800033e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr

0800034a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800034a:	b580      	push	{r7, lr}
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800034e:	f000 f82f 	bl	80003b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}

08000356 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000356:	b480      	push	{r7}
 8000358:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800035a:	bf00      	nop
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
	...

08000364 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	; (8000398 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	; (800039c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	; (80003a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800038a:	f7ff ffe4 	bl	8000356 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800038e:	f000 f821 	bl	80003d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000392:	f7ff fedb 	bl	800014c <main>
  bx lr
 8000396:	4770      	bx	lr
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003a0:	0800043c 	.word	0x0800043c
  ldr r2, =_sbss
 80003a4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003a8:	20000024 	.word	0x20000024

080003ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC1_2_IRQHandler>
	...

080003b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <HAL_IncTick+0x1c>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	461a      	mov	r2, r3
 80003ba:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <HAL_IncTick+0x20>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4413      	add	r3, r2
 80003c0:	4a03      	ldr	r2, [pc, #12]	; (80003d0 <HAL_IncTick+0x20>)
 80003c2:	6013      	str	r3, [r2, #0]
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr
 80003cc:	20000000 	.word	0x20000000
 80003d0:	20000020 	.word	0x20000020

080003d4 <__libc_init_array>:
 80003d4:	b570      	push	{r4, r5, r6, lr}
 80003d6:	2600      	movs	r6, #0
 80003d8:	4d0c      	ldr	r5, [pc, #48]	; (800040c <__libc_init_array+0x38>)
 80003da:	4c0d      	ldr	r4, [pc, #52]	; (8000410 <__libc_init_array+0x3c>)
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	10a4      	asrs	r4, r4, #2
 80003e0:	42a6      	cmp	r6, r4
 80003e2:	d109      	bne.n	80003f8 <__libc_init_array+0x24>
 80003e4:	f000 f81a 	bl	800041c <_init>
 80003e8:	2600      	movs	r6, #0
 80003ea:	4d0a      	ldr	r5, [pc, #40]	; (8000414 <__libc_init_array+0x40>)
 80003ec:	4c0a      	ldr	r4, [pc, #40]	; (8000418 <__libc_init_array+0x44>)
 80003ee:	1b64      	subs	r4, r4, r5
 80003f0:	10a4      	asrs	r4, r4, #2
 80003f2:	42a6      	cmp	r6, r4
 80003f4:	d105      	bne.n	8000402 <__libc_init_array+0x2e>
 80003f6:	bd70      	pop	{r4, r5, r6, pc}
 80003f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fc:	4798      	blx	r3
 80003fe:	3601      	adds	r6, #1
 8000400:	e7ee      	b.n	80003e0 <__libc_init_array+0xc>
 8000402:	f855 3b04 	ldr.w	r3, [r5], #4
 8000406:	4798      	blx	r3
 8000408:	3601      	adds	r6, #1
 800040a:	e7f2      	b.n	80003f2 <__libc_init_array+0x1e>
 800040c:	08000434 	.word	0x08000434
 8000410:	08000434 	.word	0x08000434
 8000414:	08000434 	.word	0x08000434
 8000418:	08000438 	.word	0x08000438

0800041c <_init>:
 800041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041e:	bf00      	nop
 8000420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000422:	bc08      	pop	{r3}
 8000424:	469e      	mov	lr, r3
 8000426:	4770      	bx	lr

08000428 <_fini>:
 8000428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042a:	bf00      	nop
 800042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042e:	bc08      	pop	{r3}
 8000430:	469e      	mov	lr, r3
 8000432:	4770      	bx	lr
